#N canvas 1814 -433 2560 1302 12;
#N canvas 1947 79 605 210 reference 0;
#X obj 18 52 cnv 5 550 5 empty empty INLET: 8 18 0 13 #202020 #000000 0;
#X obj 18 88 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000 0;
#X obj 17 131 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000 0;
#X obj 18 176 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000 0;
#X text 172 17 - calculate the audio features of input signal;
#X text 112 154 ..., f 64;
#X text 89 61 signal - mono input signal;
#X text 90 91 signal - calculated audio features;
#X text 112 135 symbol - calculated audio features., f 64;
#X text 90 109 ...;
#X obj 22 17 zerr_features~ rlf;
#X restore 13 550 pd reference;
#X text 107 550 <= click;
#X obj 17 45 cnv 1 520 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X obj 12 538 cnv 1 520 1 empty empty empty 8 12 0 13 #000000 #000000 0;
#X msg 390 370 \; pd dsp \$1;
#X text 428 340 DSP on/off;
#N canvas 2566 -231 499 459 set-dsp-tgl 0;
#X msg 241 138 set 0;
#X msg 182 109 set 1;
#X obj 182 172 s \$0-set-tgl;
#X obj 182 202 r \$0-tgl;
#X obj 182 246 outlet;
#X obj 105 106 tgl 20 0 \$0-tgl \$0-set-tgl empty 0 -10 0 12 #dfdfdf #000000 #000000 0 1;
#X text 28 17 This is a simple helper abstraction for the Pd docs that sets the toggle according to the DSP state., f 42;
#N canvas 172 166 401 276 pd-messages 0;
#X obj 101 75 inlet;
#X obj 101 133 pdcontrol;
#X msg 101 105 dir;
#X msg 101 163 \; pd open pd-messages.pd \$1;
#X connect 0 0 2 0;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X restore 237 389 pd pd-messages;
#X obj 182 80 receive pd-dsp-started;
#X obj 241 109 receive pd-dsp-stopped;
#X text 46 302 The trick is to rely on these messages sent by Pd. For more details on these and other messages that Pd sends or receives \, click here --->, f 39;
#X obj 237 353 bng 21 250 50 0 empty empty empty 0 -10 0 12 #dfdfdf #000000 #000000;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 3 0 4 0;
#X connect 8 0 1 0;
#X connect 9 0 0 0;
#X connect 11 0 7 0;
#X coords 0 -1 1 1 30 30 2 100 100;
#X restore 390 332 pd set-dsp-tgl;
#X text 176 16 - calculate the audio features of input signal;
#X text 17 116 Available features:;
#X text 16 54 The [zerr_features~] calculates the audio features of input signal and output the feature signals in audio rate. The feature to be calculated is defined via arguments. The order of feature outlets is the same as the order of arguments., f 69;
#X floatatom 31 318 5 1 2000 0 F0 - - 0;
#X obj 31 368 *~ 0.5;
#X obj 31 341 osc~ 10;
#X obj 96 368 hsl 100 19 0 1 0 0 empty empty Gain -2 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 31 460 snapshot~;
#X floatatom 31 484 5 0 0 0 - - - 0;
#X obj 42 417 tgl 15 1 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 1 1;
#X obj 42 437 metro 100;
#X obj 294 465 snapshot~;
#X floatatom 294 487 5 0 0 0 - - - 0;
#X text 291 506 RootMeanSquare;
#X text 27 503 Spectral Centroid;
#X obj 305 419 tgl 15 1 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 1 1;
#X obj 305 440 metro 100;
#X text 16 274 In the help patch \, the spectral centroid and root mean square amplitude of the input sinus signal are calculated., f 69;
#X obj 31 395 zerr_features~ ctd rms;
#X obj 18 16 zerr_features~ ctd;
#X text 16 150 "zcr" ----> Zero Crossing Rate, f 69;
#X text 16 166 "flx" ----> Spectral Flux, f 69;
#X text 16 182 "ctd" ----> Spectral Centroid, f 69;
#X text 16 133 "rms" ----> Root Mean Square Amplitude, f 69;
#X text 16 198 "rlf" ----> Spectral Rolloff, f 69;
#X text 16 215 "flt" ----> Spectral Flatness, f 69;
#X text 16 231 "cf" -----> Crest Factor, f 69;
#X text 16 247 "zc" -----> Zero Crossing Trigger, f 69;
#X connect 6 0 4 0;
#X connect 10 0 12 0;
#X connect 11 0 25 0;
#X connect 12 0 11 0;
#X connect 13 0 11 1;
#X connect 14 0 15 0;
#X connect 16 0 17 0;
#X connect 17 0 14 0;
#X connect 18 0 19 0;
#X connect 22 0 23 0;
#X connect 23 0 18 0;
#X connect 25 0 14 0;
#X connect 25 1 18 0;
#X coords 0 0 0.25 0.25 0 0 0;
